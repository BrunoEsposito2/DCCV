/*
 * This source file was generated by the Gradle 'init' task
 */
package utilitynode.swarmnode

import actor.{DBCoordinator, Supervisor}

import scala.jdk.CollectionConverters.*
import akka.actor.typed.{ActorSystem, SupervisorStrategy}
import akka.actor.typed.scaladsl.Behaviors
import akka.cluster.typed.{Cluster, ClusterSingleton, SingletonActor}
import com.typesafe.config.ConfigFactory

import scala.collection.immutable.HashMap

object App:
  private def initBasicConfig =
    var settings = new HashMap[String, Object]

    /* Cluster singleton configuration */
    settings += ("akka.cluster.roles", List("Controller", "Storing").asJava)
    settings += ("akka.cluster.singleton.singleton-name", "Supervisor")
    settings += ("akka.cluster.singleton.role", "Controller")

    settings += ("akka.cluster.singleton.hand-over-retry-interval", "1s")
    settings += ("akka.cluster.singleton.min-number-of-hand-over-retries", "15")
    settings += ("akka.cluster.singleton.use-lease", "")
    settings += ("akka.cluster.singleton.lease-retry-interval", "5s")

    settings += ("akka.cluster.singleton-proxy.singleton-name", "Supervisor")
    // The role of the cluster nodes where the singleton can be deployed
    settings += ("akka.cluster.singleton-proxy.role", "Controller")
    settings += ("akka.cluster.singleton-proxy.singleton-identification-interval", "1s")
    settings += ("akka.cluster.singleton-proxy.buffer-size", "1000")

    /* Node configuration */
    settings += ("akka.remote.artery.canonical.hostname" -> "utilitynode")
    settings += ("akka.remote.artery.canonical.port" -> "2552")

    settings += ("akka.remote.artery.bind.hostname" -> "0.0.0.0")
    settings += ("akka.remote.artery.bind.port" -> "2552")

    settings += ("akka.actor.allow-java-serialization" -> "on")
    settings += ("akka.remote.artery.transport" -> "tcp")
    settings += ("akka.cluster.seed-nodes" ->
      List("akka://akka-cluster-system@cameranode:2553",
        "akka://akka-cluster-system@utilitynode:2552",
        "akka://akka-cluster-system@guibackend:2551").asJava)

    settings += ("akka.cluster.downing-provider-class" -> "akka.cluster.sbr.SplitBrainResolverProvider")
    settings += ("akka.cluster.jmx.multi-mbeans-in-same-jvm" -> "on")

    settings += ("akka.cluster.retry-unsuccessful-join-after" -> "3s")
    settings += ("akka.cluster.shutdown-after-unsuccessful-join-seed-nodes" -> "off")
    settings += ("akka.cluster.joining-timeout" -> "60s")

    settings += ("akka.actor.provider" -> "cluster")

    ConfigFactory.parseMap(settings.asJava).withFallback(ConfigFactory.load())

  def main(args: Array[String]): Unit =
    val system = ActorSystem(Behaviors.supervise(Behaviors.empty).onFailure(SupervisorStrategy.restart), "akka-cluster-system", initBasicConfig)
    val cluster = Cluster(system)
    ClusterSingleton.get(system).init(
      SingletonActor.of(
        Behaviors.supervise(Supervisor().create())
          .onFailure(
            SupervisorStrategy.resume
          ),
        "Supervisor"
      )
    )
    ClusterSingleton.get(system).init(
      SingletonActor.of(
        Behaviors.supervise(DBCoordinator())
          .onFailure(
            SupervisorStrategy.resume
          ),
        "Storing"
      )
    )
    println("Utility cluster created")
