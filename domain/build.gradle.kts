import org.gradle.internal.os.OperatingSystem
import java.util.regex.Pattern

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample C++ project to get you started.
 * For more details on building C++ applications and libraries, please refer to https://docs.gradle.org/8.7/userguide/building_cpp_projects.html in the Gradle documentation.
 */

plugins {
    id("com.github.jakemarsden.git-hooks") version "0.0.2"

    // Apply the cpp-application plugin to add support for building C++ executables
    `cpp-application`

    // Apply the cpp-unit-test plugin to add support for building and running C++ test executables
    `cpp-unit-test`
}

// Configurazione base del progetto
repositories {
    mavenCentral()
}

// Set the target operating system and architecture for this application
application {
    targetMachines.add(machines.linux.x86_64)
    targetMachines.add(machines.windows.x86_64)
}

unitTest {
    targetMachines.add(machines.linux.x86_64)
    targetMachines.add(machines.windows.x86_64)
}

val copyOpenCVLibs by tasks.registering(Copy::class) {
    onlyIf { OperatingSystem.current().isLinux }
    val libDir = file("build/libs")
    libDir.mkdirs()
    from("/usr/local/lib")
    into("build/libs")
    include("libopencv_*.so*")
}

val createDistribution by tasks.registering(Sync::class) {
    onlyIf { OperatingSystem.current().isLinux }
    from("build/exe/main/debug/linux") { into("bin") }
    from(tasks.named("copyOpenCVLibs")) { into("libs") }

    from("build/exe/main/debug/linux")
    from("build/libs")
    from("build/install/bin") { into("bin") }>
    from("run.sh")
    into("build/release/domain")
}

apply(from = "cpp-build-plugin.gradle.kts")

// Configura cpp-application per usare l'output di CMake
tasks.withType<LinkExecutable>().configureEach {
    onlyIf { OperatingSystem.current().isLinux }
    dependsOn(copyOpenCVLibs, createDistribution, "buildCMake")
    linkerArgs.addAll(listOf(
        "-L/usr/local/lib",
        "-lopencv_core",
        "-lopencv_imgproc",
        "-lopencv_objdetect",
        "-lopencv_highgui",
        "-lopencv_imgcodecs",
        "-lopencv_videoio"
    ))
    linkerArgs.add("-Wl,-rpath,/usr/local/lib")
    linkerArgs.add("-Wl,-rpath,\$ORIGIN/libs")
}

tasks.withType<CppCompile>().configureEach {
    dependsOn("buildCMake")
    onlyIf { OperatingSystem.current().isLinux }
    includes.from("/usr/local/include/opencv4")
}

/*
* Gradle tasks running docker image and container
* */
apply(from = "docker-build-plugin.gradle.kts")

tasks.test {
    onlyIf { OperatingSystem.current().isLinux }
    doLast {
        val runScript = project.projectDir
            .walk()
            .filter { it.isFile && it.name == "run.sh" }
            // prende il secondo script "run.sh" (nella directory di release invece che nella directory principale del progetto)
            .elementAt(1)
        if (runScript.exists()) {
            exec {
                commandLine("sh", "-c", """
                    chmod +x ${runScript.absolutePath} &&
                    ${runScript.absolutePath}
                """)
                standardOutput = System.out
                errorOutput = System.err
            }
        } else {
            println("Script 'run.sh' not found.")
        }
    }
}

// Configurazione Git Hooks
gitHooks {
    setHooks(mapOf("pre-commit" to "spotlessApply check"))
    setHooks(mapOf("commit-msg" to "conventionalCommits"))
    setHooksDirectory(layout.projectDirectory.dir("../.git/hooks"))
}

tasks.register("conventionalCommits") {
    val pattern = Pattern.compile("^(feat|fix|docs|style|refactor|test|chore)(\\(.*\\))?: .{1,50}")
    val message = File(".git/COMMIT_EDITMSG").readText().trim()
    if (!pattern.matcher(message).find()) {
        throw GradleException("Commit message does not follow Conventional Commits format.")
    }
}

// Installazione dei git hooks durante la build
tasks.getByPath(":prepareKotlinBuildScriptModel").dependsOn.addAll(listOf(tasks.getByName("check")))