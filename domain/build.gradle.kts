import org.gradle.internal.os.OperatingSystem

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample C++ project to get you started.
 * For more details on building C++ applications and libraries, please refer to https://docs.gradle.org/8.7/userguide/building_cpp_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the cpp-application plugin to add support for building C++ executables
    `cpp-application`

    // Apply the cpp-unit-test plugin to add support for building and running C++ test executables
    `cpp-unit-test`
}

// Configurazione base del progetto
repositories {
    mavenCentral()
}

// Set the target operating system and architecture for this application
application {
    targetMachines.add(machines.linux.x86_64)
    targetMachines.add(machines.windows.x86_64)
}

unitTest {
    targetMachines.add(machines.linux.x86_64)
    targetMachines.add(machines.windows.x86_64)
}

apply(from = "cpp-build-plugin.gradle.kts")

// Configura cpp-application per usare l'output di CMake
tasks.withType<LinkExecutable>().configureEach {
    dependsOn("buildCMake")
    onlyIf { OperatingSystem.current().isLinux }
    linkerArgs.addAll(listOf(
        "-L/usr/local/lib",
        "-lopencv_core",
        "-lopencv_imgproc",
        "-lopencv_objdetect",
        "-lopencv_highgui",
        "-lopencv_imgcodecs",
        "-lopencv_videoio"
    ))
    linkerArgs.add("-Wl,-rpath,/usr/local/lib")
}

tasks.withType<CppCompile>().configureEach {
    dependsOn("buildCMake")
    onlyIf { OperatingSystem.current().isLinux }
    includes.from("/usr/local/include/opencv4")
}

// Assicurati che i git hooks vengano installati durante il build
//tasks.getByPath(":prepareKotlinBuildScriptModel").dependsOn.addAll(listOf(tasks.getByName("check")))

/*
* Gradle tasks running docker image and container
* */
apply(from = "docker-build-plugin.gradle.kts")